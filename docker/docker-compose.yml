services:
  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: soms-postgres
    environment:
      POSTGRES_DB: soms
      POSTGRES_USER: soms_user
      POSTGRES_PASSWORD: soms_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    networks:
      - soms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U soms_user -d soms"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: soms-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - soms-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: soms-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - soms-network
    volumes:
      - zookeeper_data:/var/lib/zookeeper

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: soms-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - soms-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI (Optional - for monitoring)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: soms-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - soms-network

  # Adminer - Database Management UI
  adminer:
    image: adminer:latest
    container_name: soms-adminer
    restart: always
    ports:
      - "8091:8080"
    networks:
      - soms-network
    depends_on:
      - postgres

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:

networks:
  soms-network:
    driver: bridge